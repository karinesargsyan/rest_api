{"name": "Put method check in case of a correct payload", "status": "failed", "statusDetails": {"message": "Failed: Expecting value: line 1 column 1 (char 0)", "trace": "@allure.title(\"Put method check in case of a correct payload\")\n    def test_put_200():\n        try:\n            random_payload = {\n            \"timestamp\": int(time.time()),\n            \"number\": random.randint(1, 100)\n            }\n            updated_payload = {\n            \"timestamp\": int(time.time()),\n            \"number\": random.randint(1, 100)*100\n            }\n    \n            post_response_id = request.post(json.dumps(random_payload)).json()[\"_id\"]\n            get_response_initial_size = len(request.get().json())\n            put_response = request.put(post_response_id,json.dumps(updated_payload))\n            print(put_response.text)\n            get_response_final_size = len(request.get().json())\n            updated_payload[\"_id\"] = post_response_id\n    \n            check.equal(put_response.status_code, 200, \"Wrong response: status_code must be 200\")\n            check.equal(get_response_final_size,get_response_initial_size,\"PUT changed the size\")\n>           check.equal(put_response.json(), json.dumps(updated_payload), \"Updated not correct\")\n\ntests/test_cases.py:111: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises simplejson.JSONDecodeError: If the response body does not\n            contain valid json and simplejson is installed.\n        :raises json.JSONDecodeError: If the response body does not contain\n            valid json and simplejson is not installed on Python 3.\n        :raises ValueError: If the response body does not contain valid\n            json and simplejson is not installed on Python 2.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(\n                        self.content.decode(encoding), **kwargs\n                    )\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n>       return complexjson.loads(self.text, **kwargs)\n\n/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/requests/models.py:910: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ns = '', cls = None, object_hook = None, parse_float = None, parse_int = None, parse_constant = None, object_pairs_hook = None\nkw = {}\n\n    def loads(s, *, cls=None, object_hook=None, parse_float=None,\n            parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n        \"\"\"Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance\n        containing a JSON document) to a Python object.\n    \n        ``object_hook`` is an optional function that will be called with the\n        result of any object literal decode (a ``dict``). The return value of\n        ``object_hook`` will be used instead of the ``dict``. This feature\n        can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n    \n        ``object_pairs_hook`` is an optional function that will be called with the\n        result of any object literal decoded with an ordered list of pairs.  The\n        return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n        This feature can be used to implement custom decoders.  If ``object_hook``\n        is also defined, the ``object_pairs_hook`` takes priority.\n    \n        ``parse_float``, if specified, will be called with the string\n        of every JSON float to be decoded. By default this is equivalent to\n        float(num_str). This can be used to use another datatype or parser\n        for JSON floats (e.g. decimal.Decimal).\n    \n        ``parse_int``, if specified, will be called with the string\n        of every JSON int to be decoded. By default this is equivalent to\n        int(num_str). This can be used to use another datatype or parser\n        for JSON integers (e.g. float).\n    \n        ``parse_constant``, if specified, will be called with one of the\n        following strings: -Infinity, Infinity, NaN.\n        This can be used to raise an exception if invalid JSON numbers\n        are encountered.\n    \n        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n        kwarg; otherwise ``JSONDecoder`` is used.\n    \n        The ``encoding`` argument is ignored and deprecated since Python 3.1.\n        \"\"\"\n        if isinstance(s, str):\n            if s.startswith('\\ufeff'):\n                raise JSONDecodeError(\"Unexpected UTF-8 BOM (decode using utf-8-sig)\",\n                                      s, 0)\n        else:\n            if not isinstance(s, (bytes, bytearray)):\n                raise TypeError(f'the JSON object must be str, bytes or bytearray, '\n                                f'not {s.__class__.__name__}')\n            s = s.decode(detect_encoding(s), 'surrogatepass')\n    \n        if \"encoding\" in kw:\n            import warnings\n            warnings.warn(\n                \"'encoding' is ignored and deprecated. It will be removed in Python 3.9\",\n                DeprecationWarning,\n                stacklevel=2\n            )\n            del kw['encoding']\n    \n        if (cls is None and object_hook is None and\n                parse_int is None and parse_float is None and\n                parse_constant is None and object_pairs_hook is None and not kw):\n>           return _default_decoder.decode(s)\n\n/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/json/__init__.py:357: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x7fa1d0bf5130>, s = ''\n_w = <built-in method match of re.Pattern object at 0x7fa1d0bc7570>\n\n    def decode(self, s, _w=WHITESPACE.match):\n        \"\"\"Return the Python representation of ``s`` (a ``str`` instance\n        containing a JSON document).\n    \n        \"\"\"\n>       obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n\n/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/json/decoder.py:337: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x7fa1d0bf5130>, s = '', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\n    @allure.title(\"Put method check in case of a correct payload\")\n    def test_put_200():\n        try:\n            random_payload = {\n            \"timestamp\": int(time.time()),\n            \"number\": random.randint(1, 100)\n            }\n            updated_payload = {\n            \"timestamp\": int(time.time()),\n            \"number\": random.randint(1, 100)*100\n            }\n    \n            post_response_id = request.post(json.dumps(random_payload)).json()[\"_id\"]\n            get_response_initial_size = len(request.get().json())\n            put_response = request.put(post_response_id,json.dumps(updated_payload))\n            print(put_response.text)\n            get_response_final_size = len(request.get().json())\n            updated_payload[\"_id\"] = post_response_id\n    \n            check.equal(put_response.status_code, 200, \"Wrong response: status_code must be 200\")\n            check.equal(get_response_final_size,get_response_initial_size,\"PUT changed the size\")\n            check.equal(put_response.json(), json.dumps(updated_payload), \"Updated not correct\")\n    \n        except ValueError as e:\n>           pytest.fail(e.args[0])\nE           Failed: Expecting value: line 1 column 1 (char 0)\n\ntests/test_cases.py:114: Failed"}, "start": 1654775229940, "stop": 1654775231610, "uuid": "01b391ae-1212-44a2-bcf0-2f96cf098c66", "historyId": "87fe87f081e5c1389207eeed8a6b59f1", "testCaseId": "b4b2a9526a3e94e429b66d5c0c490efc", "fullName": "tests.test_cases#test_put_200", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_cases"}, {"name": "host", "value": "KSargsyanL2M"}, {"name": "thread", "value": "62465-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_cases"}]}